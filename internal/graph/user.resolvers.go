package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"tsv-golang/internal/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	userLogin := ctx.Value("userLogin").(string)
	return r.Service.UserService.CreateUser(userLogin, input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UserUpdateInput) (*model.User, error) {
	userLogin := ctx.Value("userLogin").(string)
	return r.Service.UserService.UpdateUser(userLogin, id, input)
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, username string, password string) (*model.LoginResponse, error) {
	return r.Service.UserService.Login(username, password)
}

// ListUsers is the resolver for the listUsers field.
func (r *queryResolver) ListUsers(ctx context.Context, request *model.ListUsersRequest) ([]*model.User, error) {
	return r.Service.UserService.ListUsers(request)
}

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	return r.Service.UserService.GetUserByID(id)
}
