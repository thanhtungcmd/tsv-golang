// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"
	"tsv-golang/internal/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type MutationResolver interface {
	CreateBoard(ctx context.Context, input *model.BoardInput) (*model.Board, error)
	UpdateBoard(ctx context.Context, id string, input model.BoardUpdateInput) (*model.Board, error)
	DeleteBoard(ctx context.Context, id string) (*string, error)
	CreateBoardList(ctx context.Context, input *model.BoardListInput) (*model.BoardList, error)
	UpdateBoardList(ctx context.Context, id string, input model.BoardListUpdateInput) (*model.BoardList, error)
	DeleteBoardList(ctx context.Context, id string) (*string, error)
	CreateProject(ctx context.Context, input *model.ProjectInput) (*model.Project, error)
	UpdateProject(ctx context.Context, id string, input model.ProjectUpdateInput) (*model.Project, error)
	DeleteProject(ctx context.Context, id string) (*string, error)
	ForgetPassword(ctx context.Context, email string) (*string, error)
	ChangePassword(ctx context.Context, email string, verifyCode string, password string) (*string, error)
	CreateUser(ctx context.Context, input model.UserInput) (*model.User, error)
	UpdateUser(ctx context.Context, id string, input model.UserUpdateInput) (*model.User, error)
}
type QueryResolver interface {
	ListBoard(ctx context.Context, request *model.ListBoardRequest) ([]*model.Board, error)
	GetBoardByID(ctx context.Context, id string) (*model.Board, error)
	ListBoardList(ctx context.Context, request *model.ListBoardListRequest) ([]*model.BoardList, error)
	GetBoardListByID(ctx context.Context, id string) (*model.BoardList, error)
	ListProject(ctx context.Context, request *model.ListProjectRequest) ([]*model.Project, error)
	GetProjectByID(ctx context.Context, id string) (*model.Project, error)
	Login(ctx context.Context, username string, password string) (*model.LoginResponse, error)
	ListUsers(ctx context.Context, request *model.ListUsersRequest) ([]*model.User, error)
	GetUserByID(ctx context.Context, id string) (*model.User, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasPermission_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "action", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["action"] = arg0
	return args, nil
}

func (ec *executionContext) dir_validate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "required", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["required"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "minLength", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["minLength"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "maxLength", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["maxLength"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "pattern", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["pattern"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_changePassword_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "email", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["email"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "verify_code", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["verify_code"] = arg1

	arg2, err := ec.field_Mutation_changePassword_argsPassword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["password"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_changePassword_argsPassword(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["password"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNString2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		required, err := ec.unmarshalOBoolean2ᚖbool(ctx, true)
		if err != nil {
			var zeroVal string
			return zeroVal, err
		}
		minLength, err := ec.unmarshalOInt2ᚖint(ctx, 8)
		if err != nil {
			var zeroVal string
			return zeroVal, err
		}
		maxLength, err := ec.unmarshalOInt2ᚖint(ctx, 50)
		if err != nil {
			var zeroVal string
			return zeroVal, err
		}
		if ec.directives.Validate == nil {
			var zeroVal string
			return zeroVal, errors.New("directive validate is not implemented")
		}
		return ec.directives.Validate(ctx, rawArgs, directive0, required, minLength, maxLength, nil)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_createBoardList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOBoardListInput2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoardListInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBoard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOBoardInput2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProject_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOProjectInput2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐProjectInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUserInput2tsvᚑgolangᚋinternalᚋgraphᚋmodelᚐUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBoardList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBoard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProject_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_forgetPassword_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "email", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBoardList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNBoardListUpdateInput2tsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoardListUpdateInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBoard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNBoardUpdateInput2tsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoardUpdateInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProject_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNProjectUpdateInput2tsvᚑgolangᚋinternalᚋgraphᚋmodelᚐProjectUpdateInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUserUpdateInput2tsvᚑgolangᚋinternalᚋgraphᚋmodelᚐUserUpdateInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBoardById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBoardListById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProjectById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listBoardList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "request", ec.unmarshalOListBoardListRequest2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐListBoardListRequest)
	if err != nil {
		return nil, err
	}
	args["request"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listBoard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "request", ec.unmarshalOListBoardRequest2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐListBoardRequest)
	if err != nil {
		return nil, err
	}
	args["request"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listProject_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "request", ec.unmarshalOListProjectRequest2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐListProjectRequest)
	if err != nil {
		return nil, err
	}
	args["request"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listUsers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "request", ec.unmarshalOListUsersRequest2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐListUsersRequest)
	if err != nil {
		return nil, err
	}
	args["request"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_login_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "username", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["username"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "password", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["password"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_createBoard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createBoard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateBoard(ctx, fc.Args["input"].(*model.BoardInput))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.Board
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOBoard2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoard,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createBoard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Board_id(ctx, field)
			case "project_id":
				return ec.fieldContext_Board_project_id(ctx, field)
			case "name":
				return ec.fieldContext_Board_name(ctx, field)
			case "description":
				return ec.fieldContext_Board_description(ctx, field)
			case "sort_order":
				return ec.fieldContext_Board_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_Board_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_Board_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Board_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Board_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Board_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Board", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createBoard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBoard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateBoard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateBoard(ctx, fc.Args["id"].(string), fc.Args["input"].(model.BoardUpdateInput))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.Board
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOBoard2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoard,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateBoard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Board_id(ctx, field)
			case "project_id":
				return ec.fieldContext_Board_project_id(ctx, field)
			case "name":
				return ec.fieldContext_Board_name(ctx, field)
			case "description":
				return ec.fieldContext_Board_description(ctx, field)
			case "sort_order":
				return ec.fieldContext_Board_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_Board_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_Board_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Board_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Board_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Board_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Board", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBoard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteBoard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteBoard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteBoard(ctx, fc.Args["id"].(string))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteBoard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteBoard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createBoardList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createBoardList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateBoardList(ctx, fc.Args["input"].(*model.BoardListInput))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.BoardList
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOBoardList2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoardList,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createBoardList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BoardList_id(ctx, field)
			case "board_id":
				return ec.fieldContext_BoardList_board_id(ctx, field)
			case "name":
				return ec.fieldContext_BoardList_name(ctx, field)
			case "sort_order":
				return ec.fieldContext_BoardList_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_BoardList_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_BoardList_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BoardList_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_BoardList_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_BoardList_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoardList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createBoardList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBoardList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateBoardList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateBoardList(ctx, fc.Args["id"].(string), fc.Args["input"].(model.BoardListUpdateInput))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.BoardList
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOBoardList2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoardList,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateBoardList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BoardList_id(ctx, field)
			case "board_id":
				return ec.fieldContext_BoardList_board_id(ctx, field)
			case "name":
				return ec.fieldContext_BoardList_name(ctx, field)
			case "sort_order":
				return ec.fieldContext_BoardList_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_BoardList_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_BoardList_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BoardList_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_BoardList_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_BoardList_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoardList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBoardList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteBoardList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteBoardList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteBoardList(ctx, fc.Args["id"].(string))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteBoardList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteBoardList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createProject,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateProject(ctx, fc.Args["input"].(*model.ProjectInput))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.Project
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOProject2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐProject,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "sort_order":
				return ec.fieldContext_Project_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_Project_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Project_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateProject,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateProject(ctx, fc.Args["id"].(string), fc.Args["input"].(model.ProjectUpdateInput))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.Project
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOProject2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐProject,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "sort_order":
				return ec.fieldContext_Project_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_Project_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Project_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteProject,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteProject(ctx, fc.Args["id"].(string))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *string
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_forgetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_forgetPassword,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ForgetPassword(ctx, fc.Args["email"].(string))
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_forgetPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_forgetPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changePassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_changePassword,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ChangePassword(ctx, fc.Args["email"].(string), fc.Args["verify_code"].(string), fc.Args["password"].(string))
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_changePassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changePassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateUser(ctx, fc.Args["input"].(model.UserInput))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.User
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}
			directive2 := func(ctx context.Context) (any, error) {
				action, err := ec.unmarshalNString2string(ctx, "user.create")
				if err != nil {
					var zeroVal *model.User
					return zeroVal, err
				}
				if ec.directives.HasPermission == nil {
					var zeroVal *model.User
					return zeroVal, errors.New("directive hasPermission is not implemented")
				}
				return ec.directives.HasPermission(ctx, nil, directive1, action)
			}

			next = directive2
			return next
		},
		ec.marshalOUser2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone_number":
				return ec.fieldContext_User_phone_number(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "use_yn":
				return ec.fieldContext_User_use_yn(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "verify_code":
				return ec.fieldContext_User_verify_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateUser(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UserUpdateInput))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.User
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}
			directive2 := func(ctx context.Context) (any, error) {
				action, err := ec.unmarshalNString2string(ctx, "user.update")
				if err != nil {
					var zeroVal *model.User
					return zeroVal, err
				}
				if ec.directives.HasPermission == nil {
					var zeroVal *model.User
					return zeroVal, errors.New("directive hasPermission is not implemented")
				}
				return ec.directives.HasPermission(ctx, nil, directive1, action)
			}

			next = directive2
			return next
		},
		ec.marshalOUser2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone_number":
				return ec.fieldContext_User_phone_number(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "use_yn":
				return ec.fieldContext_User_use_yn(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "verify_code":
				return ec.fieldContext_User_verify_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listBoard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_listBoard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().ListBoard(ctx, fc.Args["request"].(*model.ListBoardRequest))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal []*model.Board
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOBoard2ᚕᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoard,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_listBoard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Board_id(ctx, field)
			case "project_id":
				return ec.fieldContext_Board_project_id(ctx, field)
			case "name":
				return ec.fieldContext_Board_name(ctx, field)
			case "description":
				return ec.fieldContext_Board_description(ctx, field)
			case "sort_order":
				return ec.fieldContext_Board_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_Board_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_Board_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Board_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Board_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Board_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Board", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listBoard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBoardById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getBoardById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetBoardByID(ctx, fc.Args["id"].(string))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.Board
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOBoard2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoard,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getBoardById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Board_id(ctx, field)
			case "project_id":
				return ec.fieldContext_Board_project_id(ctx, field)
			case "name":
				return ec.fieldContext_Board_name(ctx, field)
			case "description":
				return ec.fieldContext_Board_description(ctx, field)
			case "sort_order":
				return ec.fieldContext_Board_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_Board_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_Board_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Board_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Board_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Board_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Board", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getBoardById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listBoardList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_listBoardList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().ListBoardList(ctx, fc.Args["request"].(*model.ListBoardListRequest))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal []*model.BoardList
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOBoardList2ᚕᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoardList,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_listBoardList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BoardList_id(ctx, field)
			case "board_id":
				return ec.fieldContext_BoardList_board_id(ctx, field)
			case "name":
				return ec.fieldContext_BoardList_name(ctx, field)
			case "sort_order":
				return ec.fieldContext_BoardList_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_BoardList_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_BoardList_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BoardList_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_BoardList_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_BoardList_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoardList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listBoardList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBoardListById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getBoardListById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetBoardListByID(ctx, fc.Args["id"].(string))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.BoardList
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOBoardList2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐBoardList,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getBoardListById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BoardList_id(ctx, field)
			case "board_id":
				return ec.fieldContext_BoardList_board_id(ctx, field)
			case "name":
				return ec.fieldContext_BoardList_name(ctx, field)
			case "sort_order":
				return ec.fieldContext_BoardList_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_BoardList_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_BoardList_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BoardList_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_BoardList_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_BoardList_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoardList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getBoardListById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_listProject,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().ListProject(ctx, fc.Args["request"].(*model.ListProjectRequest))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal []*model.Project
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOProject2ᚕᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐProject,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_listProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "sort_order":
				return ec.fieldContext_Project_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_Project_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Project_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProjectById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getProjectById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetProjectByID(ctx, fc.Args["id"].(string))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.Project
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOProject2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐProject,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getProjectById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "sort_order":
				return ec.fieldContext_Project_sort_order(ctx, field)
			case "use_yn":
				return ec.fieldContext_Project_use_yn(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Project_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProjectById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_login,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Login(ctx, fc.Args["username"].(string), fc.Args["password"].(string))
		},
		nil,
		ec.marshalNLoginResponse2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐLoginResponse,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_LoginResponse_user(ctx, field)
			case "access_token":
				return ec.fieldContext_LoginResponse_access_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_listUsers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().ListUsers(ctx, fc.Args["request"].(*model.ListUsersRequest))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal []*model.User
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOUser2ᚕᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_listUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone_number":
				return ec.fieldContext_User_phone_number(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "use_yn":
				return ec.fieldContext_User_use_yn(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "verify_code":
				return ec.fieldContext_User_verify_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUserById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetUserByID(ctx, fc.Args["id"].(string))
		},
		func(ctx context.Context, next graphql.Resolver) graphql.Resolver {
			directive0 := next

			directive1 := func(ctx context.Context) (any, error) {
				if ec.directives.Authen == nil {
					var zeroVal *model.User
					return zeroVal, errors.New("directive authen is not implemented")
				}
				return ec.directives.Authen(ctx, nil, directive0)
			}

			next = directive1
			return next
		},
		ec.marshalOUser2ᚖtsvᚑgolangᚋinternalᚋgraphᚋmodelᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getUserById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone_number":
				return ec.fieldContext_User_phone_number(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "use_yn":
				return ec.fieldContext_User_use_yn(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "verify_code":
				return ec.fieldContext_User_verify_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createBoard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createBoard(ctx, field)
			})
		case "updateBoard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBoard(ctx, field)
			})
		case "deleteBoard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteBoard(ctx, field)
			})
		case "createBoardList":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createBoardList(ctx, field)
			})
		case "updateBoardList":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBoardList(ctx, field)
			})
		case "deleteBoardList":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteBoardList(ctx, field)
			})
		case "createProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProject(ctx, field)
			})
		case "updateProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProject(ctx, field)
			})
		case "deleteProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProject(ctx, field)
			})
		case "forgetPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_forgetPassword(ctx, field)
			})
		case "changePassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changePassword(ctx, field)
			})
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "listBoard":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listBoard(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBoardById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBoardById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listBoardList":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listBoardList(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBoardListById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBoardListById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listProject":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listProject(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getProjectById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "login":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_login(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listUsers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUsers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

// endregion ***************************** type.gotpl *****************************
