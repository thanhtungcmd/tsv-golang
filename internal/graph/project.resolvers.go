package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"tsv-golang/internal/graph/model"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input *model.ProjectInput) (*model.Project, error) {
	userLogin := ctx.Value("userLogin").(string)
	return r.Service.ProjectService.CreateProject(userLogin, input)
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.ProjectUpdateInput) (*model.Project, error) {
	userLogin := ctx.Value("userLogin").(string)
	return r.Service.ProjectService.UpdateProject(userLogin, id, input)
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (*string, error) {
	userLogin := ctx.Value("userLogin").(string)
	return r.Service.ProjectService.DeleteProject(userLogin, id)
}

// ListProject is the resolver for the listProject field.
func (r *queryResolver) ListProject(ctx context.Context, request *model.ListProjectRequest) ([]*model.Project, error) {
	return r.Service.ProjectService.ListProject(request)
}

// GetProjectByID is the resolver for the getProjectById field.
func (r *queryResolver) GetProjectByID(ctx context.Context, id string) (*model.Project, error) {
	return r.Service.ProjectService.GetProjectByID(id)
}
